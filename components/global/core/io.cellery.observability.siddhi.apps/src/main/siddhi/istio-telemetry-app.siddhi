/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

@App:name("istio-telemetry-app")
@App:description("This receives the attributes generally received by the Istio Mixer")

@source(type="telemetry-receiver", @map(type="keyvalue", fail.on.missing.attribute="false"))
define stream TelemetryStream(sourceUID string, sourceIP string, sourceLabels string, sourceName string,
                              sourceNamespace string, sourcePrincipal string, sourceOwner string,
                              sourceWorkloadUID string, sourceWorkloadName string,
                              sourceWorkloadNamespace string, destinationUID string, destinationIP string,
                              destinationPort long, destinationLabels string, destinationName string,
                              destinationNamespace string, destinationPrincipal string, destinationOwner string,
                              destinationWorkloadUID string, destinationWorkloadName string,
                              destinationWorkloadNamespace string, destinationContainerName string,
                              destinationContainerImage string, destinationServiceHost string,
                              destinationServiceUID string, destinationServiceName string,
                              destinationServiceNamespace string, requestHeaders string, requestID string,
                              requestPath string, requestHost string, requestMethod string, requestReason string,
                              requestReferer string, requestScheme string, requestSize long,
                              requestTotalSize long, requestTimeSec long, requestTimeNanoSec int,
                              requestUserAgent string, responseHeaders string, responseSize long,
                              responseTotalSize long, responseTimeSec long, responseTimeNanoSec int,
                              responseDurationSec long, responseDurationNanoSec int, responseCode long,
                              responseGRPCStatus string, responseGRPCMessage string, connectionID string,
                              connectionEvent string, connectionReceivedBytes long,
                              connectionReceivedBytesTotal long, connectionSentBytes long,
                              connectionSentBytesTotal long, connectionDurationSec long,
                              connectionDurationNanoSec int, connectionMTLS bool,
                              connectionRequestedServerName string, contextProtocol string, contextTimeSec long,
                              contextTimeNanoSec int, contextReporterKind string, contextReporterUID string,
                              apiService string, apiVersion string, apiOperation string, apiProtocol string,
                              requestAuthPrincipal string, requestAuthAudiences string,
                              requestAuthPresenter string, requestAuthClaims string, requestAPIKey string,
                              checkErrorCode long, checkErrorMessage string, checkCacheHit bool,
                              quotaCacheHit bool, contextReporterLocal bool);

@source(type="inMemory", topic="k8s-component-pods", @map(type="passThrough"))
define stream K8sComponentPodsInMemorySink(instance string, kind string, component string, name string, creationTimestamp long,
                                           lastKnownAliveTimestamp long, nodeName string, status string, action string);

@sink(type="inMemory", topic="istio-mixer-report", @map(type="passThrough"))
define stream TelemetryInMemorySink(sourceNamespace string, sourceCell string, sourceComponent string,
                                    sourcePod string, destinationNamespace string, destinationCell string,
                                    destinationComponent string, destinationPod string, contextReporterKind string,
                                    requestHeadersMap object, requestPath string, requestMethod string,
                                    requestSizeBytes long, responseCode long, responseDurationNanoSec int,
                                    responseSizeBytes long);

define window K8sComponentPodInfoWindow(podName string, cell string, component string) unique:time(podName, 11 minutes);

define function extractFromUID[javascript] return string {
    var uid = data[0];
    var index = data[1];    // 1: pod, 2: namespace

    var matches = /^([a-z0-9-.]+)\.([a-z0-9-]+)$/.exec(uid);

    var extractedData = "";
    if (matches) {
        extractedData = matches[index];
    } else if (uid === "Synapse-PT-HttpComponents-NIO") {
        if (index === 1) {
            extractedData = "global-gateway";
        }
    }
    return extractedData;
};

from K8sComponentPodsInMemorySink
select name as podName, instance as cell, component
insert into K8sComponentPodInfoWindow;

from TelemetryStream[(not sourceUID is null) and (not destinationUID is null)]
select
    str:replaceFirst(sourceUID, "^kubernetes://", "") as sourceUID,
    str:replaceFirst(destinationUID, "^kubernetes://", "") as destinationUID,
    contextReporterKind,
    ifThenElse(requestHeaders is null, map:create(), map:createFromJSON(requestHeaders)) as requestHeadersMap,
    requestPath,
    requestMethod,
    requestTotalSize as requestSizeBytes,
    responseCode,
    responseDurationNanoSec,
    responseTotalSize as responseSizeBytes
insert into PreprocessedTelemetryStream;

-- Storing the required attributes in a in memory sink (To be accessed from other siddhi apps)
-- When updating the used attributes from the received attributes the stream definitions needs to be updated in all
-- the places where the in memory source is used

from PreprocessedTelemetryStream
select
    extractFromUID(sourceUID, 2) as sourceNamespace,
    extractFromUID(sourceUID, 1) as sourcePod,
    extractFromUID(destinationUID, 2) as destinationNamespace,
    extractFromUID(destinationUID, 1) as destinationPod,
    contextReporterKind,
    requestHeadersMap,
    requestPath,
    requestMethod,
    requestSizeBytes,
    responseCode,
    responseDurationNanoSec,
    responseSizeBytes
insert into ProcessedTelemetryStream;

-- Handling the special case of the global gateway

from ProcessedTelemetryStream[sourcePod == "global-gateway"]
select
    sourceNamespace,
    "" as sourceCell,
    sourcePod as sourceComponent,
    "" as sourcePod,
    destinationNamespace,
    "" as destinationCell,
    sourcePod as destinationComponent,
    "" as destinationPod,
    contextReporterKind,
    requestHeadersMap,
    requestPath,
    requestMethod,
    requestSizeBytes,
    responseCode,
    responseDurationNanoSec,
    responseSizeBytes
insert into TelemetryInMemorySink;

-- This is required since the filter processor is not a findable processor and therefore cannot be joined
from ProcessedTelemetryStream[sourcePod != "global-gateway"]
insert into NonGlobalGatewayProcessedTelemetryStream;

from NonGlobalGatewayProcessedTelemetryStream as T inner join K8sComponentPodInfoWindow as K
    on T.sourcePod == K.podName
select
    sourceNamespace,
    K.cell as sourceCell,
    K.component as sourceComponent,
    sourcePod,
    destinationNamespace,
    destinationPod,
    contextReporterKind,
    requestHeadersMap,
    requestPath,
    requestMethod,
    requestSizeBytes,
    responseCode,
    responseDurationNanoSec,
    responseSizeBytes
insert into SourceCellExtractedTelemetryStream;

from SourceCellExtractedTelemetryStream as T inner join K8sComponentPodInfoWindow as K
    on T.destinationPod == K.podName
select
    sourceNamespace,
    sourceCell,
    sourceComponent,
    sourcePod,
    destinationNamespace,
    K.cell as destinationCell,
    K.component as destinationComponent,
    destinationPod,
    contextReporterKind,
    requestHeadersMap,
    requestPath,
    requestMethod,
    requestSizeBytes,
    responseCode,
    responseDurationNanoSec,
    responseSizeBytes
insert into TelemetryInMemorySink;
